// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rank_c
Rcpp::NumericVector rank_c(Rcpp::NumericVector x);
RcppExport SEXP _partition_rank_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_c(x));
    return rcpp_result_gen;
END_RCPP
}
// apply_rank
arma::mat apply_rank(arma::mat x);
RcppExport SEXP _partition_apply_rank(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_rank(x));
    return rcpp_result_gen;
END_RCPP
}
// corr_c_mat
arma::mat corr_c_mat(arma::mat x);
RcppExport SEXP _partition_corr_c_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(corr_c_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// corr_c_2mat
arma::mat corr_c_2mat(arma::mat x, arma::mat y);
RcppExport SEXP _partition_corr_c_2mat(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(corr_c_2mat(x, y));
    return rcpp_result_gen;
END_RCPP
}
// corr_c_2vec
double corr_c_2vec(arma::vec x, arma::vec y);
RcppExport SEXP _partition_corr_c_2vec(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(corr_c_2vec(x, y));
    return rcpp_result_gen;
END_RCPP
}
// icc_c
double icc_c(const NumericMatrix& x);
RcppExport SEXP _partition_icc_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(icc_c(x));
    return rcpp_result_gen;
END_RCPP
}
// scale_rowmeans
NumericVector scale_rowmeans(NumericMatrix x);
RcppExport SEXP _partition_scale_rowmeans(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_rowmeans(x));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix
NumericMatrix subset_matrix(List& x, int& i, arma::mat& m);
RcppExport SEXP _partition_subset_matrix(SEXP xSEXP, SEXP iSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix(x, i, m));
    return rcpp_result_gen;
END_RCPP
}
// min_icc_c
NumericVector min_icc_c(List& columns, arma::mat& x, int& k, double& threshold);
RcppExport SEXP _partition_min_icc_c(SEXP columnsSEXP, SEXP xSEXP, SEXP kSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< double& >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(min_icc_c(columns, x, k, threshold));
    return rcpp_result_gen;
END_RCPP
}
// kmeans_c
arma::mat kmeans_c(arma::mat& x, int k, int n_iter, bool verbose, int seed);
RcppExport SEXP _partition_kmeans_c(SEXP xSEXP, SEXP kSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_c(x, k, n_iter, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}
// assign_cluster
NumericVector assign_cluster(arma::mat& x, arma::mat init_centroids);
RcppExport SEXP _partition_assign_cluster(SEXP xSEXP, SEXP init_centroidsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type init_centroids(init_centroidsSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_cluster(x, init_centroids));
    return rcpp_result_gen;
END_RCPP
}
// kmean_assignment
NumericVector kmean_assignment(arma::mat& x, int k, int n_iter, bool verbose, int seed);
RcppExport SEXP _partition_kmean_assignment(SEXP xSEXP, SEXP kSEXP, SEXP n_iterSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmean_assignment(x, k, n_iter, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}
// minR2_c
List minR2_c(NumericMatrix x);
RcppExport SEXP _partition_minR2_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(minR2_c(x));
    return rcpp_result_gen;
END_RCPP
}
// pca_c
List pca_c(arma::mat x);
RcppExport SEXP _partition_pca_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_c(x));
    return rcpp_result_gen;
END_RCPP
}
// reduce_partition_c
List reduce_partition_c(List x, DataFrame df, Function assign_partition, List partitioner, const double& threshold, const double& tolerance, const std::string& var_prefix, const int& niter);
RcppExport SEXP _partition_reduce_partition_c(SEXP xSEXP, SEXP dfSEXP, SEXP assign_partitionSEXP, SEXP partitionerSEXP, SEXP thresholdSEXP, SEXP toleranceSEXP, SEXP var_prefixSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< Function >::type assign_partition(assign_partitionSEXP);
    Rcpp::traits::input_parameter< List >::type partitioner(partitionerSEXP);
    Rcpp::traits::input_parameter< const double& >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type var_prefix(var_prefixSEXP);
    Rcpp::traits::input_parameter< const int& >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_partition_c(x, df, assign_partition, partitioner, threshold, tolerance, var_prefix, niter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_partition_rank_c", (DL_FUNC) &_partition_rank_c, 1},
    {"_partition_apply_rank", (DL_FUNC) &_partition_apply_rank, 1},
    {"_partition_corr_c_mat", (DL_FUNC) &_partition_corr_c_mat, 1},
    {"_partition_corr_c_2mat", (DL_FUNC) &_partition_corr_c_2mat, 2},
    {"_partition_corr_c_2vec", (DL_FUNC) &_partition_corr_c_2vec, 2},
    {"_partition_icc_c", (DL_FUNC) &_partition_icc_c, 1},
    {"_partition_scale_rowmeans", (DL_FUNC) &_partition_scale_rowmeans, 1},
    {"_partition_subset_matrix", (DL_FUNC) &_partition_subset_matrix, 3},
    {"_partition_min_icc_c", (DL_FUNC) &_partition_min_icc_c, 4},
    {"_partition_kmeans_c", (DL_FUNC) &_partition_kmeans_c, 5},
    {"_partition_assign_cluster", (DL_FUNC) &_partition_assign_cluster, 2},
    {"_partition_kmean_assignment", (DL_FUNC) &_partition_kmean_assignment, 5},
    {"_partition_minR2_c", (DL_FUNC) &_partition_minR2_c, 1},
    {"_partition_pca_c", (DL_FUNC) &_partition_pca_c, 1},
    {"_partition_reduce_partition_c", (DL_FUNC) &_partition_reduce_partition_c, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_partition(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
